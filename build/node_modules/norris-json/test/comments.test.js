'use strict';

module.exports.make = function make(deps) {
	if (undefined === deps) deps = {};

	var vows 	= deps.vows 	|| require('vows'),
		assert 	= deps.assert 	|| require('assert'),
		njson	= deps.njson 	|| require(__dirname + '/../lib/norris-json');

	var suite = vows.describe('NORRIS-JSON Commented JSON Unit Test');

	suite.addBatch({
		'GIVEN that we want to test parsing of commented JSON files (async)' : {
			topic : function topic() {
				var nj = njson.make();
				nj.load(__dirname + '/mocks/commented.json', this.callback);
			},

			'THEN the JSON object should be parsed correctly' : function testResults(err, json) {
				assert.isObject(json);
			},

			'THEN the property "foo" should have the value "bar"' : function testResults(err, json) {
				assert.equal(json.foo, "bar");
			},

			'THEN the property "foo2" should have the value "bar2"' : function testResults(err, json) {
				assert.equal(json.foo2, "bar2");
			},

			'THEN the property "foo3" should have the value "bar3"' : function testResults(err, json) {
				assert.equal(json.foo3, "bar3");
			},

			'THEN the property "foo4" should have the value "bar4"' : function testResults(err, json) {
				assert.equal(json.foo4, "bar4");
			},

			'THEN the property "foo5" should have the value "bar5"' : function testResults(err, json) {
				assert.equal(json.foo5, "bar5");
			},

			'THEN the property "foo6" should have the value "bar6"' : function testResults(err, json) {
				assert.equal(json.foo6, "bar6");
			},

			'THEN the property "foo7" should have the value "bar7"' : function testResults(err, json) {
				assert.equal(json.foo7, "bar7");
			},

			'THEN the property "foo8" should have the value "bar8"' : function testResults(err, json) {
				assert.equal(json.foo8, "bar8");
			},

			'THEN the property "foo9" should have the value "bar9"' : function testResults(err, json) {
				assert.equal(json.foo9, "bar9");
			},

			'THEN the property "foo10" should have the value "bar10"' : function testResults(err, json) {
				assert.equal(json.foo10, "bar10");
			},

			'THEN the property "foo11" should have the value "bar11"' : function testResults(err, json) {
				assert.equal(json.foo11, "bar11");
			},

			'THEN the property "foo12" should have the value "bar12"' : function testResults(err, json) {
				assert.equal(json.foo12, "bar12");
			}
		},

		'GIVEN that we want to test parsing of commented JSON files (sync)' : {
			topic : function topic() {
				var nj = njson.make();
				return nj.loadSync(__dirname + '/mocks/commented.json');
			},

			'THEN the JSON object should be parsed correctly' : function testResults(err, json) {
				assert.isObject(json);
			},

			'THEN the property "foo" should have the value "bar"' : function testResults(err, json) {
				assert.equal(json.foo, "bar");
			},

			'THEN the property "foo2" should have the value "bar2"' : function testResults(err, json) {
				assert.equal(json.foo2, "bar2");
			},

			'THEN the property "foo3" should have the value "bar3"' : function testResults(err, json) {
				assert.equal(json.foo3, "bar3");
			},

			'THEN the property "foo4" should have the value "bar4"' : function testResults(err, json) {
				assert.equal(json.foo4, "bar4");
			},

			'THEN the property "foo5" should have the value "bar5"' : function testResults(err, json) {
				assert.equal(json.foo5, "bar5");
			},

			'THEN the property "foo6" should have the value "bar6"' : function testResults(err, json) {
				assert.equal(json.foo6, "bar6");
			},

			'THEN the property "foo7" should have the value "bar7"' : function testResults(err, json) {
				assert.equal(json.foo7, "bar7");
			},

			'THEN the property "foo8" should have the value "bar8"' : function testResults(err, json) {
				assert.equal(json.foo8, "bar8");
			},

			'THEN the property "foo9" should have the value "bar9"' : function testResults(err, json) {
				assert.equal(json.foo9, "bar9");
			},

			'THEN the property "foo10" should have the value "bar10"' : function testResults(err, json) {
				assert.equal(json.foo10, "bar10");
			},

			'THEN the property "foo11" should have the value "bar11"' : function testResults(err, json) {
				assert.equal(json.foo11, "bar11");
			},

			'THEN the property "foo12" should have the value "bar12"' : function testResults(err, json) {
				assert.equal(json.foo12, "bar12");
			}
		}
	});

	return suite;
}