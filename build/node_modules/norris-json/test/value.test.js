'use strict';

module.exports.make = function make(deps) {
	if (undefined === deps) deps = {};

	var vows 	= deps.vows		|| require('vows'),
		assert	= deps.assert	|| require('assert'),
		njson	= deps.njson	|| require(__dirname + '/../lib/norris-json');

	var suite = vows.describe('NORRIS-JSON value Unit Test');

	suite.addBatch({
		'GIVEN that we want to test getting a nested value' : {
			topic : function topic() {
				var nj 		= njson.make(),
					self 	= this;

				nj.load(__dirname + '/mocks/value.json', function onLoad(err, data) {
					if (err) {
						self.callback(err);
						return;
					}

					self.callback(null, nj.value(data, 'foo.bar.subar'));
				});
			},

			'THEN the namespace "foo.bar.subar" should give the value "oh yeah!"' : function test(err, value) {
				if (err) {
					console.log(err.stack);
					return;
				}

				assert.isNull(err);
				assert.strictEqual(value, "oh yeah!");
			}
		},

		'GIVEN that we want to test getting an invalid nested value' : {
			topic : function topic() {
				var nj		= njson.make(),
					self	= this;

				nj.load(__dirname + '/mocks/value.json', function onLoad(err, data) {
					if (err) {
						self.callback(err);
						return;
					}

					self.callback(null, nj.value(data, 'foo.bar.nobar'));
				});
			},

			'THEN the namespace "foo.bar.nobar" should return a null' : function test(err, value) {
				if (err) {
					console.log(err.stack);
					return;
				}

				assert.isNull(err);
				assert.strictEqual(value, null);
			}
		},

		'GIVEN that we want to test returning a default value' : {
			topic : function topic() {
				var nj		= njson.make(),
					self	= this;

				nj.load(__dirname + '/mocks/value.json', function onLoad(err, data) {
					if (err) {
						self.callback(err);
						return;
					}

					self.callback(null, nj.value(data, 'foo.bar.nobar', 'swim like a fish'));
				});
			},

			'THEN the namespace "foo.bar.nobar" should return "swim like a fish"' : function test(err, value) {
				if (err) {
					coonsole.log(err.stack);
					return;
				}

				assert.isNull(err);
				assert.strictEqual(value, 'swim like a fish');
			}
		}
	});

	return suite;
}