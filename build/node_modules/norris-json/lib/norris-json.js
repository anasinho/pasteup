'use strict';

module.exports.make = function make(deps) {
	if (undefined === deps) deps = {};

	var fs = deps.fs || require('fs');

	//-------------------------------------------------------------------------
	// Removes all c-styled comments from a string
	//-------------------------------------------------------------------------
	function _removeComments(str) {
		// Remove all C-style slash comments
		str = str.replace(/(?:^|[^\\])\/\/.*$/gm, '');

		// Remove all C-style star comments
		str = str.replace(/\/\*[\s\S]*?\*\//gm, '');

		return str;
	}

	///////////////////////////////////////////////////////////////////////////
	// NORRIS-JSON object definition
	///////////////////////////////////////////////////////////////////////////
	var njson = {
		//---------------------------------------------------------------------
		// Attaches all functions in njson to the global JSON object
		//---------------------------------------------------------------------
		attachToGlobal : function attachToGlobal() {
			var self = this, i, p, JSON = GLOBAL.JSON;

			// Don't proceed if JSON is not defined
			if (undefined === JSON) return;

			for (i in self) {
				p = self[i];
				if ('function' === typeof p && undefined === JSON[i] && 'attachToGlobal' !== i) {
					JSON[i] = p;
				}
			}

			return JSON;
		},

		//---------------------------------------------------------------------
		// Loads JSON from a file
		//---------------------------------------------------------------------
		load : function load(path, callback) {
			var self = this;

			fs.readFile(path, 'utf-8', function onRead(err, data) {
				var result;

				if (err) {
					callback(err);
					return;
				}

				try {
					result = JSON.parse(_removeComments(data));
					callback(null, result);
				} catch (err) {
					callback(err);
				}
			});
		},

		//---------------------------------------------------------------------
		// Loads JSON from a file (sync function)
		//---------------------------------------------------------------------
		loadSync : function loadSync(path) {
			var data = fs.readFileSync(path, 'utf-8');
			return JSON.parse(_removeComments(data));
		},

		//---------------------------------------------------------------------
		// Loads a nested value using a namespace string
		//---------------------------------------------------------------------
		value : function value(json, namespace, def) {
			var segs 	= namespace.split('.'),
				ptr		= json,
				last	= segs[segs.length - 1],
				i, seg;

			if (undefined === def) def = null;
			if ('object' !== typeof json) return def;

			// Walk down the object tree
			for (i in segs) {
				seg = segs[i];

				if (undefined === ptr[seg]) break;

				if (last === seg) {
					return ptr[seg];
				}

				// shift the pointer ahead
				ptr = ptr[seg];
			}

			return def;
		}
	}

	return njson;
}